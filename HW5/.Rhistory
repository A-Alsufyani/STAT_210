v1[1:10]
install.packages("tinytex")
tinytex::install_tinytex()
gc()
getwd()
setwd("C:/Users/ksa4e/OneDrive/Desktop/KAUST/STAT_210/HW5")
getwd()
read_table("25Fhw5Q1")
read_table("25Fhw5Q1");
data <- read_table("25Fhw5Q1");
data <- read.table("25Fhw4Q1")
data <- read_table("25Fhw5Q1");
data <- read_table("25Fhw5Q1", header = TRUE);
getwd()
headd(data)
data <- read.table("25Fhw5Q1", header = TRUE);
headd(data)
head(data)
unique(data$diet)
head(data)
type(data$diet)
str(data$diet)
str(data)
#head(data)
#unique(data$diet)
str(data)
data$diet <- as.factor(data$diet)
str(data)
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "black"))
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
data <- read.table("25Fhw5Q1", header = TRUE);
#head(data)
#unique(data$diet)
str(data)
str(data)
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
data$diet <- as.factor(data$diet)
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
stripchart(weight_gain ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
data <- read.table("25Fhw5Q1", header = TRUE);
#head(data)
#unique(data$diet)
str(data)
data$diet <- as.factor(data$diet)
str(data)
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red")
,
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
hist(data$weight_gain,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "lightblue",
breaks = 15)
hist(data$weight,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "lightblue",
breaks = 15)
hist(data$weight,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "lightblue")
,
hist(data$weight,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "lightblue",
breaks = 15)
#here we show the data visually as a box plot and as points on top of the same plot.
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
stripchart(weight ~ diet, data = data,
vertical = TRUE,
method = "jitter",
pch = 19,
col = "red",
add = TRUE)
#this histogram shows the overall distribution of the weight gain
hist(data$weight,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "lightblue",
breaks = 15)
#this histogram shows the overall distribution of the weight gain
hist(data$weight,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "blue",
breaks = 15)
#here we show the data visually as a box plot and as points on top of the same plot.
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
levels(data$diet)
library(car)
model <- aov(weight ~ diet, data = data)
summary(model)
model <- aov(weight ~ diet, data = data)
summary(model)
summary.lm(model)
model <- aov(weight ~ diet, data = data)
summary(model)
summary.lm(model)
mod1 <- aov(weight ~ diet, data = data)
summary(mod1)
#we next try to find the cell means and analyze further.
model.tables(mod1, 'mean', se = T)
summary(mod1)
#we next try to find the cell means and analyze further.
#we use model.tables to find the cell mean of the different types of diets
model.tables(mod1, 'mean', se = T)
#we next try to find the cell means and analyze further.
#we use model.tables to find the cell mean of the different types of diets
model.tables(mod1, 'mean', se = T)
model.tables(mod1, se = T)
mod1 <- aov(weight ~ diet, data = data)
summary(mod1)
#we next try to find the cell means and analyze further.
#we use model.tables with argument "mean" to find the cell mean of the different types of diets
model.tables(mod1, 'mean', se = T)
model.tables(mod1, se = T)
shapiro.test(residuals(mod1))
par(mfrow=c(2,2))
plot(mod1)
leveneTest(mod1)
leveneTest(mod1)
shapiro.test(rstandard(mod1))
#Shapiro-wilk test for normality
#H0: Residuals are normally distributed
#H1: Residuals are not normally distributed
shapiro.test(rstandard(mod1))
#here we show the data visually as a box plot and as points on top of the same plot.
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
library(car)
data <- read.table("25Fhw5Q1", header = TRUE);
#head(data)
#unique(data$diet)
str(data)
data$diet <- as.factor(data$diet)
str(data)
levels(data$diet)
#here we show the data visually as a box plot and as points on top of the same plot.
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
points(density ~ temperature, data = Q1data, pch = 16, col = 'blue')
points(density ~ temperature, data = Q1data, pch = 16, col = 'blue')
points(weight ~ diet, data = data, pch = 16, col = 'blue')
points(weight ~ diet, data = data, pch = 16, col = 'black')
points(weight ~ diet, data = data, pch = 16, col = 'purple')
points(weight ~ diet, data = data, pch = 16, method = "jitter", col = 'purple')
points(weight ~ diet, data = data, pch = 16, col = 'purple')
points(weight ~ diet, data = data, pch = 16, col = 'purple')
library(car)
data <- read.table("25Fhw5Q1", header = TRUE);
#head(data)
#unique(data$diet)
str(data)
data$diet <- as.factor(data$diet)
str(data)
levels(data$diet)
#here we show the data visually as a box plot and as points on top of the same plot.
boxplot(weight ~ diet, data = data,
main = "Weight gain by Diet type",
xlab = "Diet",
ylab = "Weigh Gain",
col = c("blue", "green", "yellow", "red", "cyan"))
points(weight ~ diet, data = data, pch = 16, col = 'purple')
#this histogram shows the overall distribution of the weight gain
hist(data$weight,
main = "Distribution of Weight Gain",
xlab = "Weight Gain",
col = "blue",
breaks = 15)
(mod1.tky <- TukeyHSD(mod1))
mod1 <- aov(weight ~ diet, data = data)
summary(mod1)
#we next try to find the cell means and analyze further.
#we use model.tables with argument "mean" to find the cell mean of the different types of diets
model.tables(mod1, 'mean', se = T)
model.tables(mod1, se = T)
par(mfrow=c(2,2))
plot(mod1)
leveneTest(mod1)
#Shapiro-wilk test for normality
#H0: Residuals are normally distributed
#H1: Residuals are not normally distributed
shapiro.test(rstandard(mod1))
(mod1.tky <- TukeyHSD(mod1))
plot(mod1.tky, las = 1 )
par(1)
par(mfrow=c(1,1))
plot(mod1.tky, las = 1 )
kruskal.test(weight_gain ~ diet, data = data)
kruskal.test(weight ~ diet, data = data)
library(car)
# Read in the fertilizer data
data <- read.table("25Fhw5Q2", header = TRUE)
str(data)
levels(data)
levels(data$fertilizer)
# Read in the fertilizer data
data2 <- read.table("25Fhw5Q2", header = TRUE)
str(data2)
levels(data$fertilizer2)
levels(data2$fertilizer2)
data2$fertilizer <- as.factor(data2$fertilizer)
levels(data2$fertilizer)
# Visualize the data: boxplot with points
boxplot(height ~ fertilizer, data = data,
main = "Plant Growth by Fertilizer Type",
xlab = "Fertilizer Type",
ylab = "Plant Height (cm)",
col = c("blue", "green", "yellow", "red", "cyan"))
# Read in the fertilizer data
data2 <- read.table("25Fhw5Q2", header = TRUE)
str(data2)
data2$fertilizer <- as.factor(data2$fertilizer)
levels(data2$fertilizer)
# Visualize the data: boxplot with points
boxplot(height ~ fertilizer, data2 = data2,
main = "Plant Growth by Fertilizer Type",
xlab = "Fertilizer Type",
ylab = "Plant Height (cm)",
col = c("blue", "green", "yellow", "red", "cyan"))
# Read in the fertilizer data
data2 <- read.table("25Fhw5Q2", header = TRUE)
str(data2)
# Read in the fertilizer data
data2 <- read.table("25Fhw5Q2", header = TRUE)
str(data2)
data2$fertilizer <- as.factor(data2$fertilizer)
levels(data2$fertilizer)
# Visualize the data: boxplot with points
boxplot(height ~ fertilizer, data = data2,
main = "Plant Growth by Fertilizer Type",
xlab = "Fertilizer Type",
ylab = "Plant Height (cm)",
col = c("blue", "green", "yellow", "red", "cyan"))
points(height ~ fertilizer, data = data, pch = 16, col = 'purple')
points(height ~ fertilizer, data = data2, pch = 16, col = 'purple')
# Fit the ANOVA model
mod2 <- aov(height ~ fertilizer, data = data2)
summary(mod2)
# Find cell means and standard errors
model.tables(mod2, "mean", se = TRUE)
# Find effects for each fertilizer
model.tables(mod2, se = TRUE)
# Diagnostic Plots
par(mfrow = c(2, 2))
plot(mod2)
# Levene’s Test for Homogeneity of Variance
# H0: all groups have equal variance
# H1: at least one group differs
leveneTest(mod2)
# Shapiro–Wilk Test for Normality of Residuals
# H0: residuals are normally distributed
# H1: residuals are not normally distributed
shapiro.test(rstandard(mod2))
# Tukey’s HSD Comparisons
(mod2.tky <- TukeyHSD(mod2))
par(mfrow = c(1, 1))
plot(mod2.tky, las = 1)
# Non-parametric Alternative: Kruskal–Wallis Test
kruskal.test(height ~ fertilizer, data = data)
# Non-parametric Alternative: Kruskal–Wallis Test
kruskal.test(height ~ fertilizer, data = data2)
